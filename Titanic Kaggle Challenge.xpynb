{
  "cells": [
    {
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true
      },
      "cell_type": "code",
      "source": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\n# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"../input\"))\n\n# Any results you write to the current directory are saved as output.",
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": "['train.csv', 'gender_submission.csv', 'test.csv']\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "79d894f7379376dfee9f0960113a8fe0e6186f1a"
      },
      "cell_type": "markdown",
      "source": "**Adding the data to the kernel**\n\nCategorical data:\n* Survived, \n* Passenger Class, \n* Sex,\n* Embarked\n\nNumerical data:\n* Age\n* Fare\n* SibSp\n* Parch\n"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "58abbeb4e6f542f8544a1a99f6cb808ef29c7519"
      },
      "cell_type": "code",
      "source": "train_df = pd.read_csv('../input/train.csv')\ntest_df = pd.read_csv('../input/test.csv')\ncombine = [train_df, test_df]\n\n#Preview Data\ntrain_df.head()",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 3,
          "data": {
            "text/plain": "   PassengerId  Survived  Pclass    ...        Fare Cabin  Embarked\n0            1         0       3    ...      7.2500   NaN         S\n1            2         1       1    ...     71.2833   C85         C\n2            3         1       3    ...      7.9250   NaN         S\n3            4         1       1    ...     53.1000  C123         S\n4            5         0       3    ...      8.0500   NaN         S\n\n[5 rows x 12 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "80d2b67ef8d10270cdf5dede2bf6d5f43daeaf20"
      },
      "cell_type": "markdown",
      "source": "Observations:\nNaN under Cabin & Age\nNames have variable spelling"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "63eca72ed18b8cc2272709b24fc718a761af3da8"
      },
      "cell_type": "code",
      "source": "train_df.tail()",
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/plain": "     PassengerId  Survived  Pclass    ...      Fare Cabin  Embarked\n886          887         0       2    ...     13.00   NaN         S\n887          888         1       1    ...     30.00   B42         S\n888          889         0       3    ...     23.45   NaN         S\n889          890         1       1    ...     30.00  C148         C\n890          891         0       3    ...      7.75   NaN         Q\n\n[5 rows x 12 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>886</th>\n      <td>887</td>\n      <td>0</td>\n      <td>2</td>\n      <td>Montvila, Rev. Juozas</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>211536</td>\n      <td>13.00</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>888</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Graham, Miss. Margaret Edith</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>112053</td>\n      <td>30.00</td>\n      <td>B42</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>889</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>W./C. 6607</td>\n      <td>23.45</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>890</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Behr, Mr. Karl Howell</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>111369</td>\n      <td>30.00</td>\n      <td>C148</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>891</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Dooley, Mr. Patrick</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>370376</td>\n      <td>7.75</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "4d440b6f8b29f6ecd11a8b4bc370191c800d0f9f"
      },
      "cell_type": "code",
      "source": "train_df.info()\nprint('_'*40)\ntest_df.info()",
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.6+ KB\n________________________________________\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\nPassengerId    418 non-null int64\nPclass         418 non-null int64\nName           418 non-null object\nSex            418 non-null object\nAge            332 non-null float64\nSibSp          418 non-null int64\nParch          418 non-null int64\nTicket         418 non-null object\nFare           417 non-null float64\nCabin          91 non-null object\nEmbarked       418 non-null object\ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "a244716bc5bd744bb85bec77e142b8917f3953f3"
      },
      "cell_type": "markdown",
      "source": "Cabin, Age & Embarked contain null objects that need to be cleaned\nCabin & Age are incomplete "
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "b6bca42f957db8529dde805c628c361d22f9f3ce"
      },
      "cell_type": "code",
      "source": "train_df.describe(percentiles=[.1, .2, .3, .4, .5, .6, .7, .8, .9, .99])",
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "       PassengerId    Survived     ...           Parch        Fare\ncount   891.000000  891.000000     ...      891.000000  891.000000\nmean    446.000000    0.383838     ...        0.381594   32.204208\nstd     257.353842    0.486592     ...        0.806057   49.693429\nmin       1.000000    0.000000     ...        0.000000    0.000000\n10%      90.000000    0.000000     ...        0.000000    7.550000\n20%     179.000000    0.000000     ...        0.000000    7.854200\n30%     268.000000    0.000000     ...        0.000000    8.050000\n40%     357.000000    0.000000     ...        0.000000   10.500000\n50%     446.000000    0.000000     ...        0.000000   14.454200\n60%     535.000000    0.000000     ...        0.000000   21.679200\n70%     624.000000    1.000000     ...        0.000000   27.000000\n80%     713.000000    1.000000     ...        1.000000   39.687500\n90%     802.000000    1.000000     ...        2.000000   77.958300\n99%     882.100000    1.000000     ...        4.000000  249.006220\nmax     891.000000    1.000000     ...        6.000000  512.329200\n\n[15 rows x 7 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>10%</th>\n      <td>90.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>14.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.550000</td>\n    </tr>\n    <tr>\n      <th>20%</th>\n      <td>179.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>19.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.854200</td>\n    </tr>\n    <tr>\n      <th>30%</th>\n      <td>268.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>22.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>8.050000</td>\n    </tr>\n    <tr>\n      <th>40%</th>\n      <td>357.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>25.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>10.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>60%</th>\n      <td>535.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>31.800000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>21.679200</td>\n    </tr>\n    <tr>\n      <th>70%</th>\n      <td>624.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>36.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>27.000000</td>\n    </tr>\n    <tr>\n      <th>80%</th>\n      <td>713.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>41.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>39.687500</td>\n    </tr>\n    <tr>\n      <th>90%</th>\n      <td>802.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>50.000000</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>77.958300</td>\n    </tr>\n    <tr>\n      <th>99%</th>\n      <td>882.100000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>65.870000</td>\n      <td>5.000000</td>\n      <td>4.000000</td>\n      <td>249.006220</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "40201addf1147e3576ee8f8847ce9427a5051986"
      },
      "cell_type": "markdown",
      "source": "* 38% survived - compared to actual survival rate of 32% \n* The average age was 29 years old - the youngest 0.42 and the oldest 80 years old\n*  30% brought a single sibling or spouse onboard\n*  Less than 20% had parents or children onboard - 1% had 4!"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ba01545975c2233c3085ff927459063091b37ee0"
      },
      "cell_type": "code",
      "source": "#Describe categorical features\ntrain_df.describe(include=['O'])",
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 7,
          "data": {
            "text/plain": "                                  Name   Sex  Ticket    Cabin Embarked\ncount                              891   891     891      204      889\nunique                             891     2     681      147        3\ntop     Baclini, Miss. Marie Catherine  male  347082  B96 B98        S\nfreq                                 1   577       7        4      644",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Ticket</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891</td>\n      <td>891</td>\n      <td>891</td>\n      <td>204</td>\n      <td>889</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>891</td>\n      <td>2</td>\n      <td>681</td>\n      <td>147</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>Baclini, Miss. Marie Catherine</td>\n      <td>male</td>\n      <td>347082</td>\n      <td>B96 B98</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>577</td>\n      <td>7</td>\n      <td>4</td>\n      <td>644</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "4529e16bd8bf2e58a66e6822ea1516e3198c32ac"
      },
      "cell_type": "markdown",
      "source": "Most passengers were male - 577 / 891\nCabin & Ticket number have duplicates\nMost people embarked from Port S"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "e647b2b87d8db9a843edc8fef8b151d8b201c7b4"
      },
      "cell_type": "code",
      "source": "train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)",
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 8,
          "data": {
            "text/plain": "   Pclass  Survived\n0       1  0.629630\n1       2  0.472826\n2       3  0.242363",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.629630</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0.472826</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0.242363</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "e7edd13b8999901fc15c231bc98a5cf098fa49d6"
      },
      "cell_type": "markdown",
      "source": "Over 69% of Pclass 1 survived - survival rate is negatively correlated with Pclass"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "847ba4c4359e16f5315e2cb9afe60de17b8ec179"
      },
      "cell_type": "code",
      "source": "train_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)",
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/plain": "      Sex  Survived\n0  female  0.742038\n1    male  0.188908",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>female</td>\n      <td>0.742038</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>male</td>\n      <td>0.188908</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "966f0b9c6fedde91aa7cdb9926b2cd91cd1df4ae"
      },
      "cell_type": "markdown",
      "source": "Women were more likely to survive - 75% less likely"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "66cc75a267dc1dea938a37f2e082548127583db4"
      },
      "cell_type": "code",
      "source": "train_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean()",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 10,
          "data": {
            "text/plain": "   SibSp  Survived\n0      0  0.345395\n1      1  0.535885\n2      2  0.464286\n3      3  0.250000\n4      4  0.166667\n5      5  0.000000\n6      8  0.000000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SibSp</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.345395</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.535885</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0.464286</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0.250000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>0.166667</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>8</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "cf80b5e64a99f14f8e688cae4f291e1b114a8538"
      },
      "cell_type": "markdown",
      "source": "Sibling/Spouse don't have much correlation? "
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "58922858b334d4b40a0399f112ebd1a15912d8d3"
      },
      "cell_type": "code",
      "source": "train_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)",
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 11,
          "data": {
            "text/plain": "   Parch  Survived\n3      3  0.600000\n1      1  0.550847\n2      2  0.500000\n0      0  0.343658\n5      5  0.200000\n4      4  0.000000\n6      6  0.000000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Parch</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0.600000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.550847</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0.500000</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.343658</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>0.200000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ebf08b04e59fbe98c158985d1b625590d7bc6f98"
      },
      "cell_type": "code",
      "source": "#sns is from seaborn\nsurvivedAgeGrid = sns.FacetGrid(train_df, col='Survived')\nsurvivedAgeGrid.map(plt.hist, 'Age', bins=80)\npClassAgegrid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.2, aspect=1.6)\npClassAgegrid.map(plt.hist, 'Age', alpha=.5, bins=20)\npClassAgegrid.add_legend()\nembarkedgrid = sns.FacetGrid(train_df, row='Embarked', size=2.2, aspect=1.6)\nembarkedgrid.map(sns.pointplot, 'Pclass', 'Survived','Sex', palette='deep')\nembarkedgrid.add_legend()\n\n",
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": "/opt/conda/lib/python3.6/site-packages/seaborn/axisgrid.py:703: UserWarning: Using the pointplot function without specifying `order` is likely to produce an incorrect plot.\n  warnings.warn(warning)\n/opt/conda/lib/python3.6/site-packages/seaborn/axisgrid.py:708: UserWarning: Using the pointplot function without specifying `hue_order` is likely to produce an incorrect plot.\n  warnings.warn(warning)\n",
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "execution_count": 12,
          "data": {
            "text/plain": "<seaborn.axisgrid.FacetGrid at 0x7f6ae7d42438>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f6ae8074630>",
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f6ae7fe50b8>",
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f6ae7cf4c88>",
            "image/png": "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\nI/X+AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "cf58abdf638011485a33f81410b98ca0d73080d9"
      },
      "cell_type": "markdown",
      "source": "**Observations**\n* Ages most likely to survive were around age 29 as we saw\n* Pclass = 1 most likely to survvive\n* Female passengers were far more likely to survive - exception being those who embarked from C"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "9ff451b8c949f95fda1a08e10b25079748bb5de4"
      },
      "cell_type": "code",
      "source": "barplot = sns.FacetGrid(train_df, row='Embarked', col='Survived', size=2.2, aspect=1.6)\nbarplot.map(sns.barplot, 'Sex', 'Fare', alpha = .5)\nbarplot.add_legend()",
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": "/opt/conda/lib/python3.6/site-packages/seaborn/axisgrid.py:703: UserWarning: Using the barplot function without specifying `order` is likely to produce an incorrect plot.\n  warnings.warn(warning)\n",
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "execution_count": 13,
          "data": {
            "text/plain": "<seaborn.axisgrid.FacetGrid at 0x7f6ae805f550>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f6ae805fc18>",
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "9f347aa94eebdbb15ff167359cff8230f94b17f4"
      },
      "cell_type": "markdown",
      "source": "**Observations**\n* Passengers who paid a higher fare were more likely to survive\n* More of those who embarked from Port C survived\n"
    },
    {
      "metadata": {
        "_uuid": "1ef089c5285e0d0ceb790a62503671b750447be7"
      },
      "cell_type": "markdown",
      "source": "**Preprocessing Data**\n\n1. Drop Cabin feature\n2. Drop Ticket feature"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "fb8be6a9cdebc211f8f571811a0e119f0658e883"
      },
      "cell_type": "code",
      "source": "print(\"Before\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)\n\ntrain_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis=1)\ncombine = [train_df, test_df]\n# train_df.tail()\n# train_df.head()\n\nprint(\"After\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)",
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Before (891, 12) (418, 11) (891, 12) (418, 11)\nAfter (891, 10) (418, 9) (891, 10) (418, 9)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "f93a888de3d60d81b61f85b827870223d3812513"
      },
      "cell_type": "markdown",
      "source": "**Creating New Features**\n\nWhat if we wanted to create a new feature called \"Title\" "
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "8db197987ba63dec01949e321fc81fb13df773ed"
      },
      "cell_type": "code",
      "source": "for dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train_df['Title'], train_df['Sex'])",
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 15,
          "data": {
            "text/plain": "Sex       female  male\nTitle                 \nCapt           0     1\nCol            0     2\nCountess       1     0\nDon            0     1\nDr             1     6\nJonkheer       0     1\nLady           1     0\nMajor          0     2\nMaster         0    40\nMiss         182     0\nMlle           2     0\nMme            1     0\nMr             0   517\nMrs          125     0\nMs             1     0\nRev            0     6\nSir            0     1",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Sex</th>\n      <th>female</th>\n      <th>male</th>\n    </tr>\n    <tr>\n      <th>Title</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Capt</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Col</th>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Countess</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Don</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Dr</th>\n      <td>1</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Jonkheer</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>Lady</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Major</th>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Master</th>\n      <td>0</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>Miss</th>\n      <td>182</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Mlle</th>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Mme</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Mr</th>\n      <td>0</td>\n      <td>517</td>\n    </tr>\n    <tr>\n      <th>Mrs</th>\n      <td>125</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Ms</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Rev</th>\n      <td>0</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Sir</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "560d13f7176c8639e9852cc453a25dd901493bc6"
      },
      "cell_type": "markdown",
      "source": "To reclassify titles and summarised equivalent titles (eg. Ms to Miss)"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "d2701464c510f4e438edd655e1ab6a0e784e4c61"
      },
      "cell_type": "code",
      "source": "for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', \\\n                                                 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()\n\ntitle_mapping = {'Mr': 1, 'Miss': 2, 'Mrs': 3, 'Master': 4, 'Rare': 5}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain_df.head()\n\n",
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 16,
          "data": {
            "text/plain": "   PassengerId  Survived  Pclass  ...       Fare Embarked  Title\n0            1         0       3  ...     7.2500        S      1\n1            2         1       1  ...    71.2833        C      3\n2            3         1       3  ...     7.9250        S      2\n3            4         1       1  ...    53.1000        S      3\n4            5         0       3  ...     8.0500        S      1\n\n[5 rows x 11 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "c638a10b6b2b15aac8f4d6cb9d4fc79c116d2531"
      },
      "cell_type": "code",
      "source": "# Drop Name and PassengerId feature\ntrain_df = train_df.drop(['Name', 'PassengerId'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.shape, test_df.shape",
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "((891, 9), (418, 9))"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_kg_hide-output": false,
        "trusted": true,
        "_uuid": "a705efb15821b428ec24bf765dfe31df41eab3bc"
      },
      "cell_type": "code",
      "source": "# Converting categorical features to numerical ones\nfor dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map({'female': 1, 'male': 0}).astype(int)\ntrain_df.head()",
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 18,
          "data": {
            "text/plain": "   Survived  Pclass  Sex   Age  SibSp  Parch     Fare Embarked  Title\n0         0       3    0  22.0      1      0   7.2500        S      1\n1         1       1    1  38.0      1      0  71.2833        C      3\n2         1       3    1  26.0      0      0   7.9250        S      2\n3         1       1    1  35.0      1      0  53.1000        S      3\n4         0       3    0  35.0      0      0   8.0500        S      1",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "6b733ccb8722c860eb2fc92e80da25f2749c8db9"
      },
      "cell_type": "code",
      "source": "#Completing features with missing or null values \n# Use median values of correlated features - eg. guess the age based on median values for the age\n# across Pclass, Gender....etc\ngrid = sns.FacetGrid(train_df, row='Pclass', col='Sex', size=4.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()",
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 19,
          "data": {
            "text/plain": "<seaborn.axisgrid.FacetGrid at 0x7f6ae7740438>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f6ae7740278>",
            "image/png": "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\nQ7+vhe3Be6X/TmPZMz14L/bfqf6F7sH67/xe9kr/nepeuB5cU+EAAADAKhZpV20AAADYcYIzAAAA\nDAjOAAAAMCA4AwAAwIDgDAAAAAOCMwAAAAwIzgAAADAgOAMAAMCA4AwAAAADgjMAAAAMCM4AAAAw\nIDgDAADAgOAMa6iqr1XVjVV1c1X9ZlU9crDsv66qn9vJ+h6kjpdU1aemy+9X1dMeZLnLquoHVpl/\nYlVdXVU3VdUfVtV7t73ob67hW6rqiqq6o6qur6rTdroGAHaP/rtr/ffZVfWJqjpcVS/Y6ceHeSU4\nw9r+urvP6u4zk/xtkpftdkHr8KdJ/p/u/p4kv5zk0g3e/98kuba7n9bdZyS5eNYFrsOFSe7v7u9K\nckmS1+9CDQDsHv13d/rvZ5O8NMnbduGxYW4JzrAxH07yXUlSVf90+kT5pqr6jWMXrKp/VlUfm37+\nW0c+Ka+qF06fnt9UVR+a5j21qj46fbL+qao6fStFdvfvd/f90+QfJDllg6s4KcldR63vU0eN619M\n4/pUVb12mve90/TDq+pRVXVLVZ25lTEkeX6Sy6fb70rynKqqLa4TgMWk/+5Q/+3uO6fHfWAr64G9\nZt9uFwCLoqr2JXlekmuq6qlJfiHJs7r7vqo6YZW7vLu7/9t039dlZQvqf0ryS0l+uLv/rKqOn5Z9\nWZJf6+63VtXDkhy3yuNfkeTJqzzOr3b3fx+UfmGS/299o/w7b0xyRVW9PMnvJvn17r67qp6b5PQk\nZyepJFdV1bO7+0NVdVWS1yV5RJL/0d03rzKGDyd5zCqP93Pd/bvHzDs5yeeSpLsPV9VfJPnWJPdt\ncCwALDD9d8f7L7AKwRnW9oiqunG6/eEkb07yz5O8q7vvS5Lu/vNV7nfm1LCPT/LoJO+b5v9eksuq\n6p1J3j3N+0iSX6iqU7LS8G8/dmXd/Y83WnhV/WBWGvc/2Mj9uvt9VfUdSc7Lyj8rn5w+wX7udPnk\ntOijs9LIP5SV3cs+luT/JPmZB1nvP9xI+autYgP3B2Cx6b+703+BVQjOsLa/7u6zjp4x7TK8Voi7\nLMn53X1TVb00yQ8kSXe/rKq+L8mPJLmxqs7q7rdV1fXTvPdV1U919/uPecwNfeJdVd+T5E1Jntfd\nX1jHOL/B9M/I25K8raquTvLsrITZf9fd/3WVu5yQlUb+0CQPT/KXq9S0kU+870ryhCR3TVsbHptk\n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\n98hYHpnkE0m+LytfwL5vmv8Nr795vWTlu1yvS3JOkquT1CKO46jx3Jnk246Zt3CvsyR/L8mfZjqv\nxCKP5Zj6n5vk9xZxLElOTvK5JCdk5USZVyf54UV+v2zz72vhe/Be7L9T7XuiBy96/51q3TM9WP+d\n78si99+pzoXswQuzxTlf/wUfcdc0b9Gd2N33JMl0/fhdrmdDquq0JE9Pcn0WeCzTrlU3Jvn/27v7\nYNvusj7g38dcQAiUELykkUADmiBIIWAawTiOAsGAlEQNSqQ1TmOjHWoh2tpQprZUncLoENSxTlNe\nEh3knUgmOoQ0gKC1gQQSSAhJeEkhJOQGJCDWKoGnf+x14Xo5Wfe87HP2Xvt8PjN79l7rrL3387tn\nrfPc714ve1+Sy5N8PMld3X33sMhU1rdXJPnlJF8bph+caY5jv07yjqq6uqrOGeZNcT17ZJI7k7xm\nOITvlVV1eKY5lgM9N8nrhseTGkt3fybJbyb5VJLbk3wxydWZ9vaynVaxB09qnV3LKvTgFeq/yWr1\nYP13uU22/ybT7cFTCs61xjyXBF+gqrp/krckeWF3f2nR9WxFd3+1Z4e+HJPkpCSPXmuxna1qY6rq\nWUn2dffVB85eY9GlHsdBTu7uJ2Z2eOjzq+oHFl3QJu1J8sQkv9fdT0jy15nAoVRjhvOOnp3kTYuu\nZTOGc8BOS/KIJN+e5PDM1rODTWl72U5T/1uyclalB69C/01Wsgfrv0tq6v03mW4PnlJwvjXJww6Y\nPibJbQuqZZ7uqKqjk2S437fgetalqu6VWcN+bXe/dZg9ybEcqLvvSvLuzM4bO6Kq9n/X+RTWt5OT\nPLuqbkny+swOFXtFpjeOr+vu24b7fZmdx3NSprme3Zrk1u6+cph+c2aNfIpj2e8ZST7Q3XcM01Mb\ny9OSfLK77+zuryR5a5Lvy4S3l222ij14auvs161iD554/01WrAfrv0tt6v03mWgPnlJwfn+S44ar\nrd07s0MULllwTfNwSZKzhsdnZXau0lKrqkryqiQ3dPfLD/jR5MaSJFW1t6qOGB7fN7ON+YYk70py\nxrDY0o+nu1/U3cd097GZbR/v7O7nZWLj2K+qDq+qB+x/nNn5PNdlgutZd382yaer6lHDrKcm+Ugm\nOJYDnJlvHCaWTG8sn0rypKq63/A3bf/vZJLbyw5YxR48tXU2yWr14FXpv8lq9WD9d+lNvf8mU+3B\n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\ngjMAAACMcI7zYOrnugAAALA97HEGAACAEYIzAAAAjBCcAQAAYITgDAAAACNcHAyAuZjXRRbPPeX4\nubwOHIoLg06X3x2w0+xxBgAAgBGCMwAAAIwQnAEAAGCEc5yBlePct/VzPjHAzlt0n9rq+0+5d+zm\nsbM1W9rjXFWnVtWNVfWxqjpvXkUBAOP0YADYOZsOzlV1WJLfTfKMJI9JcmZVPWZehQEAa9ODAWBn\nbWWP80lJPtbdn+juv0vy+iSnzacsAGCEHgwAO2grwfmhST59wPStwzwAYHvpwQCwg7ZycbBaY15/\n00JV5yQ5Z5j8clXduIX33O/bknxuDq+zDIxlORnLcjKWOfvF+bzMXMcyp5o2a96/l7d396lzfL39\nDtmDt6n/Jkuy7s6JsSwnY1lOXx/Lgv9Oz8Omfy9LOPaVXMfmZK49eCvB+dYkDztg+pgktx28UHdf\nkOSCLbzPN6mqq7r7xHm+5qIYy3IyluVkLMvJWBbikD14O/pvMql/o0MyluVkLMvJWJaTseycrRyq\n/f4kx1XVI6rq3kmem+SS+ZQFAIzQgwFgB216j3N3311V/zrJZUkOS/Lq7r5+bpUBAGvSgwFgZ23l\nUO10958k+ZM51bIRcz/0bIGMZTkZy3IyluVkLAugB8+FsSwnY1lOxrKcjGWHVPc3Xc8LAAAAGGzl\nHGcAAABYeZMKzlV1alXdWFUfq6rzFl3PRlXVq6tqX1Vdd8C8I6vq8qq6ebh/0CJrXI+qelhVvauq\nbqiq66vqBcP8yY0lSarqW6vqfVV17TCelwzzH1FVVw7jecNwAZ6lV1WHVdUHq+rSYXqS40iSqrql\nqj5cVddU1VXDvKmuZ0dU1Zur6qPDtvPkKY6lqh41/D72375UVS+c6FjOHbb566rqdcPfgsluL9tt\nyj14Vfpvslo9eNX6b7I6PVj/XT6r1H+TafbgyQTnqjosye8meUaSxyQ5s6oes9iqNuzCJAd/l9h5\nSa7o7uOSXDFML7u7k/xSdz86yZOSPH/4XUxxLEnyt0me0t2PT3JCklOr6klJXpbk/GE8X0hy9gJr\n3IgXJLnhgOmpjmO/H+ruEw74eoKprme/ldn3CX5Xksdn9jua3Fi6+8bh93FCku9J8n+TXJyJjaWq\nHprk3yQ5sbsfm9kFtp6b6W8v22IFevCFWY3+m6xWD161/pusVg/Wf5fIqvTfZMI9uLsncUvy5CSX\n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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "e390b1fa1ef8b6a756b53b9d63549e897a98ae98"
      },
      "cell_type": "code",
      "source": "guess_ages = np.zeros((2,3))\nguess_ages\n#iterate over Sex & Pclass to calculate the median ages\nfor dataset in combine:\n    for i in range(0,2):\n        for j in range(0,3):\n            guess_df = dataset[(dataset['Sex'] == i) &\n                              (dataset['Pclass'] == j+1)]['Age'].dropna()\n            age_guess = guess_df.median()\n            \n            #Convert random age to nearest .5 age\n            guess_ages[i,j] = int(age_guess/0.5 + 0.5) * 0.5\n    for i in range(0,2):\n        for j in range(0,3):\n            dataset.loc[(dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\n                       'Age'] = guess_ages[i,j]\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_df.head()",
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "   Survived  Pclass  Sex  Age  SibSp  Parch     Fare Embarked  Title\n0         0       3    0   22      1      0   7.2500        S      1\n1         1       1    1   38      1      0  71.2833        C      3\n2         1       3    1   26      0      0   7.9250        S      2\n3         1       1    1   35      1      0  53.1000        S      3\n4         0       3    0   35      0      0   8.0500        S      1",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>38</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>26</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>35</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>35</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "6b6eb15544ab21323382f109d73d07bd50c46934"
      },
      "cell_type": "code",
      "source": "#Create Age bands and identify correlations with survival\ntrain_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)",
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 21,
          "data": {
            "text/plain": "         AgeBand  Survived\n0  (-0.08, 16.0]  0.550000\n1   (16.0, 32.0]  0.337374\n2   (32.0, 48.0]  0.412037\n3   (48.0, 64.0]  0.434783\n4   (64.0, 80.0]  0.090909",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AgeBand</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>(-0.08, 16.0]</td>\n      <td>0.550000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>(16.0, 32.0]</td>\n      <td>0.337374</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>(32.0, 48.0]</td>\n      <td>0.412037</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>(48.0, 64.0]</td>\n      <td>0.434783</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>(64.0, 80.0]</td>\n      <td>0.090909</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "52c17c07fbafc6f528da0687240a363dd3720bd0"
      },
      "cell_type": "code",
      "source": "for dataset in combine:\n#     dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[ (dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[ (dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[ (dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']\ntrain_df.head()\n\n#optional: to remove the AgeBand feature \ntrain_df = train_df.drop(['AgeBand'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.head()",
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 22,
          "data": {
            "text/plain": "   Survived  Pclass  Sex  Age  SibSp  Parch     Fare Embarked  Title\n0         0       3    0    1      1      0   7.2500        S      1\n1         1       1    1    2      1      0  71.2833        C      3\n2         1       3    1    1      0      0   7.9250        S      2\n3         1       1    1    2      1      0  53.1000        S      3\n4         0       3    0    2      0      0   8.0500        S      1",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "6cd387ba5db77625bdaae391c8ee93fee594cf29"
      },
      "cell_type": "code",
      "source": "#create new family feature by combining parents and children & sibling and spouse. \n# Reduce the dimensions of our dataset\n\n#testing correlation of suvival with FamilySize feature\nfor dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n\n#testing now with IsAlone\nfor dataset in combine:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()\n\n#drop FamilySize in favour of IsAlone\ntrain_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ncombine = [train_df, test_df]\n\ntrain_df.head()",
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 23,
          "data": {
            "text/plain": "   Survived  Pclass  Sex  Age     Fare Embarked  Title  IsAlone\n0         0       3    0    1   7.2500        S      1        0\n1         1       1    1    2  71.2833        C      3        0\n2         1       3    1    1   7.9250        S      2        1\n3         1       1    1    2  53.1000        S      3        0\n4         0       3    0    2   8.0500        S      1        1",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>IsAlone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "f3eb81f635215a3684b55fb0633ce96554794990"
      },
      "cell_type": "code",
      "source": "#create a Pclass*Age coefficient feature\nfor dataset in combine:\n    dataset['Age*Class'] = dataset.Age * dataset.Pclass\n    \ntrain_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)",
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 24,
          "data": {
            "text/plain": "   Age*Class  Age  Pclass\n0          3    1       3\n1          2    2       1\n2          3    1       3\n3          2    2       1\n4          6    2       3\n5          3    1       3\n6          3    3       1\n7          6    2       3\n8          3    1       3\n9         28   14       2",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age*Class</th>\n      <th>Age</th>\n      <th>Pclass</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>3</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>6</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>28</td>\n      <td>14</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "49d29e5ea8a22c519050872d2dde57e2735ad96b"
      },
      "cell_type": "code",
      "source": "#Fill NA embarked features with the most common occurence \nfreq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port\n\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)\n\n#Convert categorical feature to numerical\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)\n\ntrain_df.head()",
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 25,
          "data": {
            "text/plain": "   Survived  Pclass  Sex  Age    ...      Embarked  Title  IsAlone  Age*Class\n0         0       3    0    1    ...             0      1        0          3\n1         1       1    1    2    ...             1      3        0          2\n2         1       3    1    1    ...             0      2        1          3\n3         1       1    1    2    ...             0      3        0          2\n4         0       3    0    2    ...             0      1        1          6\n\n[5 rows x 9 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>IsAlone</th>\n      <th>Age*Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>7.2500</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>71.2833</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>7.9250</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>53.1000</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8.0500</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "f91b87d6db67836c34e751b63ecdb5c382a71664"
      },
      "cell_type": "code",
      "source": "#Fill NA in Fare with median Fare rate\ntest_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\ntest_df.head()\n\ntrain_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)",
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 26,
          "data": {
            "text/plain": "          FareBand  Survived\n0   (-0.001, 7.91]  0.197309\n1   (7.91, 14.454]  0.303571\n2   (14.454, 31.0]  0.454955\n3  (31.0, 512.329]  0.581081",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>FareBand</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>(-0.001, 7.91]</td>\n      <td>0.197309</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>(7.91, 14.454]</td>\n      <td>0.303571</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>(14.454, 31.0]</td>\n      <td>0.454955</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>(31.0, 512.329]</td>\n      <td>0.581081</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "7017d10f752059ddd2fe3b3addb8497d6859be0e"
      },
      "cell_type": "code",
      "source": "#Convert the Fare feature to the FareBand\nfor dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31.0), 'Fare'] = 2\n    dataset.loc[(dataset['Fare'] > 31.0), 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\n# train_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]\n\ntrain_df.head(10)",
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 27,
          "data": {
            "text/plain": "   Survived  Pclass  Sex       ...         IsAlone  Age*Class         FareBand\n0         0       3    0       ...               0          3   (-0.001, 7.91]\n1         1       1    1       ...               0          2  (31.0, 512.329]\n2         1       3    1       ...               1          3   (7.91, 14.454]\n3         1       1    1       ...               0          2  (31.0, 512.329]\n4         0       3    0       ...               1          6   (7.91, 14.454]\n5         0       3    0       ...               1          3   (7.91, 14.454]\n6         0       1    0       ...               1          3  (31.0, 512.329]\n7         0       3    0       ...               0          6   (14.454, 31.0]\n8         1       3    1       ...               0          3   (7.91, 14.454]\n9         1       2    1       ...               0         28   (14.454, 31.0]\n\n[10 rows x 10 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>IsAlone</th>\n      <th>Age*Class</th>\n      <th>FareBand</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>(-0.001, 7.91]</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>(31.0, 512.329]</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n      <td>(7.91, 14.454]</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>(31.0, 512.329]</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>6</td>\n      <td>(7.91, 14.454]</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>(7.91, 14.454]</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>(31.0, 512.329]</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>6</td>\n      <td>(14.454, 31.0]</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>(7.91, 14.454]</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>14</td>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>28</td>\n      <td>(14.454, 31.0]</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_kg_hide-output": true,
        "trusted": true,
        "_uuid": "617461c054927c8633e25a24b8890a824716ad66"
      },
      "cell_type": "code",
      "source": "test_df.head(10)",
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 28,
          "data": {
            "text/plain": "   PassengerId  Pclass  Sex  Age    ...      Embarked  Title  IsAlone  Age*Class\n0          892       3    0    2    ...             2      1        1          6\n1          893       3    1    2    ...             0      3        0          6\n2          894       2    0    3    ...             2      1        1          6\n3          895       3    0    1    ...             0      1        1          3\n4          896       3    1    1    ...             0      3        0          3\n5          897       3    0   14    ...             0      1        1         42\n6          898       3    1    1    ...             2      2        1          3\n7          899       2    0    1    ...             0      1        0          2\n8          900       3    1    1    ...             1      3        1          3\n9          901       3    0    1    ...             0      1        0          3\n\n[10 rows x 9 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Title</th>\n      <th>IsAlone</th>\n      <th>Age*Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>897</td>\n      <td>3</td>\n      <td>0</td>\n      <td>14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>42</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>898</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>899</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>900</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>901</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "d5ecc3059e3ec57507414ff36a9ec1d7c2c78a09"
      },
      "cell_type": "markdown",
      "source": "**The Modeling Phase**"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "044c4a7a0d478beed3f02027d6f1becc76a4ad49"
      },
      "cell_type": "code",
      "source": "#DENOTE TRAINING & TEST SETS\n\n#X training set, remove the survived feature\nX_train = train_df.drop('Survived', axis=1)\n#Create a Y training set consisting of the Survived feature\nY_train = train_df['Survived']\n#Create a test set without the Passenger Id feature - we didn't remove it earlier\nX_test = test_df.drop('PassengerId', axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape",
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 29,
          "data": {
            "text/plain": "((891, 9), (891,), (418, 8))"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "110445cbec67c3964128f8cae9829fb831f39613"
      },
      "cell_type": "code",
      "source": "#Logistic Regression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\n#Output the confidence score generated by the model\nacc_log",
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "float() argument must be a string or a number, not 'pandas._libs.interval.Interval'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-30-ee4b933fb747>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Logistic Regression\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mlogreg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLogisticRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mlogreg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mY_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlogreg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0macc_log\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogreg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_train\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/sklearn/linear_model/logistic.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m   1215\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1216\u001b[0m         X, y = check_X_y(X, y, accept_sparse='csr', dtype=_dtype,\n\u001b[0;32m-> 1217\u001b[0;31m                          order=\"C\")\n\u001b[0m\u001b[1;32m   1218\u001b[0m         \u001b[0mcheck_classification_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1219\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, warn_on_dtype, estimator)\u001b[0m\n\u001b[1;32m    669\u001b[0m     X = check_array(X, accept_sparse, dtype, order, copy, force_all_finite,\n\u001b[1;32m    670\u001b[0m                     \u001b[0mensure_2d\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_nd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_min_samples\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 671\u001b[0;31m                     ensure_min_features, warn_on_dtype, estimator)\n\u001b[0m\u001b[1;32m    672\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mmulti_output\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    673\u001b[0m         y = check_array(y, 'csr', force_all_finite=True, ensure_2d=False,\n",
            "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, warn_on_dtype, estimator)\u001b[0m\n\u001b[1;32m    492\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    493\u001b[0m                 \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msimplefilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'error'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mComplexWarning\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 494\u001b[0;31m                 \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    495\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    496\u001b[0m                 raise ValueError(\"Complex data not supported\\n\"\n",
            "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/numpy/core/numeric.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m    529\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    530\u001b[0m     \"\"\"\n\u001b[0;32m--> 531\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    532\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: float() argument must be a string or a number, not 'pandas._libs.interval.Interval'"
          ]
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "8cd7e0067b44363bafa1657b02017a8b9a86c6dd",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "#We can check our assumptions about the features by checking the coefficients\ncoeff_df = pd.DataFrame(train_df.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df['Correlation'] = pd.Series(logreg.coef_[0])\ncoeff_df\n# coeff_df.sort_values(by='Correlation', ascending=False)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "40b66b3cd94550fda1c153419f7872d6b5c8f591",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "#Support Vector Machines\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\n\n#confidence score of the SVM\nacc_svc",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "3673f03f10d043df38835cbcfc5c08e554e76583",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "#K Neighbors Classifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "686c7fbf3b56d713c9ae2427dd86de75acdeed31",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "#Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\n\nacc_gaussian",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "13c0114ade0327604428c42a2681e9aa29ee3be2",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "# Perceptron \n\nperceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "94ed0275111d9ad6b398fbe991a98881c2380c74",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "#Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc\n\ncoeff_df = pd.DataFrame(train_df.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df['Correlation'] = pd.Series(linear_svc.coef_[0])\ncoeff_df",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "f93cff5622c35a744c17da414b8fa091faf198e8",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "#Stochastic Gradient Descent\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "37aca2b99b322d5e73c71dac6308707bb46e3d88",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "#Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\n\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "30ef0b296f99cfddc16a4d267b7f21b7cca5d164",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "#Random Forest Classifier\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "cc285f32e3a3e3654de14691678c5d9bf5ac5db0"
      },
      "cell_type": "code",
      "source": "#MODEL CONFIDENCE COMPARISON\nmodels = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', 'Random Forest'\n             'Naive Bayes', 'Perceptron', 'SGD', 'Linear SVC', 'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, acc_random_forest, acc_gaussian,\n             acc_perceptron, acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)\n\nsubmission = pd.DataFrame({ \n    'PassengerId': test_df['PassengerId'],\n    'Survived': Y_pred\n    })",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}